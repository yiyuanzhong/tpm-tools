--- a/libtpm/lib/hmac.c
+++ b/libtpm/lib/hmac.c
@@ -381,32 +381,35 @@
 /****************************************************************************/
 uint32_t TSS_rawhmac(unsigned char *digest, const unsigned char *key, unsigned int keylen, ...)
    {
-   HMAC_CTX hmac;
+   HMAC_CTX *hmac;
    unsigned int dlen;
    unsigned char *data;
    va_list argp;
+   int ret;
    
-#ifdef HAVE_HMAC_CTX_CLEANUP
-   HMAC_CTX_init(&hmac);
-#endif
-   HMAC_Init(&hmac,key,keylen,EVP_sha1());
+   if (!(hmac = HMAC_CTX_new()))
+      return ERR_CRYPT_ERR;
 
+   if (HMAC_Init_ex(hmac,key,keylen,EVP_sha1(),NULL) != 1)
+      {
+      HMAC_CTX_free(hmac);
+      return ERR_CRYPT_ERR;
+      }
+
    va_start(argp,keylen);
    for (;;)
       {
       dlen = (unsigned int)va_arg(argp,unsigned int);
-      if (dlen == 0) break;
+      if (dlen == 0) { ret = 0; break; }
       data = (unsigned char *)va_arg(argp,unsigned char *);
-      if (data == NULL) return ERR_NULL_ARG;
-      HMAC_Update(&hmac,data,dlen);
+      if (data == NULL) { ret = ERR_NULL_ARG; break; }
+      if (HMAC_Update(hmac,data,dlen) != 1) { ret = ERR_CRYPT_ERR; break; }
       }
-   HMAC_Final(&hmac,digest,&dlen);
 
-#ifdef HAVE_HMAC_CTX_CLEANUP
-   HMAC_CTX_cleanup(&hmac);
-#else
-   HMAC_cleanup(&hmac);
-#endif
+   if (HMAC_Final(hmac,digest,&dlen) != 1)
+      ret = ERR_CRYPT_ERR;
+
+   HMAC_CTX_free(hmac);
    va_end(argp);
-   return 0;
+   return ret;
    }
